var mongo=require("mongodb");
var host="localhost";
var server=new mongo.Server(host,27017,{auto_reconnect:true});//创建数据库所在的服务器服务器
var db=new mongo.Db("test",server,{safe:true});
var socketIo={}

socketio=function(server){
  //在线用户
  var onlineUsers = {};
  //当前在线人数
  var onlineCount = 0;
  //在线用户
  var onlineUsersChess = {};
  //当前在线人数
  var onlineCountChess = 0;

  var io = require('socket.io')(server);
  io.on('connection',function(socket){
  	//console.log("new msg");

  	socket.on('chat message', function (from,to,data) {
        var json=[];
        json.push(onlineUsers[from]);
        json.push(from);
        json.push(data);
  	    io.emit('chat message',json);
        if(data.indexOf("/**/")==-1&&data.indexOf("/##/")==-1){
        db.open(function (err,db) {
              db.collection("messages",function(err,collection){
                if(err) throw err;
                  else{
                      collection.findOne({rel:"commonality"},function (err,docs){
                        if(err) throw err;
                        else{
                          if(docs){
                            collection.updateOne({rel:docs.rel},{$set:{massage:docs.massage+"/**/"+new Date().getTime()+"/##/"+from+"&chat"+"/##/"+data}},function(){
                              db.close();
                            });
                          }else{
                            collection.insert({rel:"commonality",massage:new Date().getTime()+"/##/"+from+"&chat"+"/##/"+data},function(){
                              db.close();
                            });
                          }
                        }
                      })
                    }
                  })
                });
          }
  	});
    socket.on('private message', function (from,to,data) {
      var json=[];
      json.push(onlineUsers[from]);
      json.push(from);
      json.push(data);
    	io.emit('to'+to,json);

      if(data.indexOf("/**/")==-1&&data.indexOf("/##/")==-1){
      db.open(function (err,db) {
            db.collection("messages",function(err,collection){
              if(err) throw err;
                else{
                    collection.findOne({$or:[{rel:from+"&"+to},{rel:to+"&"+from}]},function (err,docs){
                      if(err) throw err;
                      else{
                        if(docs){
                          collection.updateOne({rel:docs.rel},{$set:{massage:docs.massage+"/**/"+new Date().getTime()+"/##/"+from+"&"+to+"/##/"+data}},function(){
                            db.close();
                          });
                        }else{
                          collection.insert({rel:from+"&"+to,massage:new Date().getTime()+"/##/"+from+"&"+to+"/##/"+data},function(){
                            db.close();
                          });
                        }
                      }
                    })
                  }
              	})
              });
        }
    });
    socket.on('private chess', function (from,to,data) {
      var json=[];
      json.push(onlineUsersChess[from]);
      json.push(from);
      json.push(data);
      io.emit('to'+to,json);
    });

      socket.on('login', function(obj){
          //将新加入用户的唯一标识当作socket的名称，后面退出的时候会用到
          socket.name = obj.userid;
          //检查在线列表，如果不在里面就加入
          if(!onlineUsers.hasOwnProperty(obj.userid)) {
              onlineUsers[obj.userid] = obj.username;
              //在线人数+1
              onlineCount++;
          }
          io.emit('login', {onlineUsers:onlineUsers, onlineCount:onlineCount, user:obj.username});

      });
      //五子棋登录
      socket.on('loginChess', function(obj){
          //将新加入用户的唯一标识当作socket的名称，后面退出的时候会用到
          socket.name= obj.userid;
          //检查在线列表，如果不在里面就加入
          if(!onlineUsersChess.hasOwnProperty(obj.userid)) {
              onlineUsersChess[obj.userid] = obj.username;
              //在线人数+1
              onlineCountChess++;
          }

          io.emit('loginChess', {onlineUsers:onlineUsersChess, onlineCount:onlineCountChess, user:obj.username});

      });

      //监听用户退出
      socket.on('disconnect', function(){
          //将退出的用户从在线列表中删除
          if(onlineUsers.hasOwnProperty(socket.name)) {
              //退出用户的信息
              var obj = {userid:socket.name, username:onlineUsers[socket.name]};
              //删除
              delete onlineUsers[socket.name];
              //在线人数-1
              onlineCount--;
              io.emit('logout', {onlineUsers:onlineUsers, onlineCount:onlineCount, user:obj});
          }
           if(onlineUsersChess.hasOwnProperty(socket.name)) {
              //退出用户的信息
              var obj = {userid:socket.name, username:onlineUsersChess[socket.name1]};
              //删除
              delete onlineUsersChess[socket.name];
              //在线人数-1
              onlineCountChess--;
              io.emit('logoutChess', {onlineUsers:onlineUsersChess, onlineCount:onlineCountChess, user:obj});
          }
      });
  });
}
module.exports = socketio;
